name: Build and Push Backend

on:
  workflow_dispatch:
  push:
    paths:
      - 'backend/**'    

jobs:
  build:
    env:
       GITHUB_SHA: ${{ github.sha }}
       ECR_REGISTRY: 354918400547.dkr.ecr.us-east-2.amazonaws.com
       ECR_REPOSITORY: backend
       Cluster_name: 3tier-application-cluster
       service_name: backend-service
       AWS-region: us-east-2
    runs-on: ubuntu-latest

    permissions:
      id-token: write  

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::354918400547:role/ECR-github-role  
          aws-region: ${{ env.AWS-region }}
          audience: sts.amazonaws.com  
          
      - name: Login to Amazon ECR
        run: |
          echo "Logging in to Amazon ECR..."
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 354918400547.dkr.ecr.us-east-2.amazonaws.com
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build, Tag, and Push Docker image to ECR
        run: |
          IMAGE_TAG=$(git rev-parse --short "$GITHUB_SHA")
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
        
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
          
      - name: Update ECS Task Definition
        run: |
          IMAGE_TAG=$(git rev-parse --short "$GITHUB_SHA")
          NEW_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "Backend-task-definition" --region ${{ env.AWS-region }})
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$NEW_IMAGE" \
           '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          
          registered-task-definition=$(aws ecs register-task-definition --region ${{ env.AWS-region }} --cli-input-json "$NEW_TASK_DEFINITION") # register new task definition
          Task-definition-arn=$(echo $registered-task-definition | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service --cluster ${{ env.Cluster_name }} --service ${{ env.service_name }} --task-definition $Task-definition-arn --region ${{ env.AWS-region }} # update new task definiton in service 
          
